# Aplica탵ie de Transfer Date Multi-Server

## Cerin탵e Prealabile

1.  **Python 3.7+**: Asigura탵i-v캒 c캒 ave탵i Python instalat.
2.  **pip**: Installer pentru pachete Python.
3.  **Node.js 탳i npm**: Necesare pentru JSON-Server, JSON-GraphQL-Server 탳i Frontend Server.
4.  **Java**: Necesar pentru RDF4J Server.
5.  **Apache Tomcat**: Pentru implementarea RDF4J Server.

## Instalare

1.  **Backend**:
    ```bash
    cd backend
    pip install -r requirements.txt
    ```

2.  **Frontend Server**:
    ```bash
    cd frontend
    npm install
    ```

3.  **JSON-Server**:
    ```bash
    npm install -g json-server@0.17
    ```

4.  **JSON-GraphQL-Server**:
    ```bash
    npm install -g json-graphql-server
    ```

## Secven탵a de Pornire Servere

1.  **Pornire RDF4J Server**:
    - Rula탵i `scripts/startup-rdf4j.bat`. Aceasta va porni Apache Tomcat.
    - Deschide탵i `http://localhost:8080/rdf4j-workbench` 칥n browser.
    - Crea탵i un nou repository:
        - Tip: `In-Memory Store`
        - ID: `grafexamen`
        - Titlu: `Graf Examen`
    - Merge탵i la repository-ul `grafexamen`.
    - Merge탵i la `Data` -> `Import`.
    - 칉nc캒rca탵i `data/baseball-teams.ttl`.

2.  **Pornire JSON-Server**:
    - Crea탵i un fi탳ier `db_rest.json` 칥n directorul root al proiectului cu urm캒torul con탵inut:
      ```json
      {
        "teams": [],
        "players": []
      }
      ```
    - Crea탵i un fi탳ier `db_graphql.json` 칥n directorul root al proiectului cu acela탳i con탵inut.
    - **Op탵iunea 1**: Folosi탵i scriptul de pornire: `scripts/startup-json-server.bat`
    - **Op탵iunea 2**: Rula탵i manual 칥n directorul root:
      ```bash
      json-server --watch db_rest.json --port 4000
      ```
    - **Not캒**: Elimina탵i `--delay 500` pentru performan탵캒 mai bun캒 칥n timpul transferurilor

3.  **Pornire JSON-GraphQL-Server** 丘멆잺 **IMPORTANT**:
    - **Op탵iunea 1**: Folosi탵i scriptul de pornire: `scripts/startup-graphql.bat`
    - **Op탵iunea 2**: Rula탵i manual 칥n directorul root:
      ```bash
      json-graphql-server db_graphql.json --port 3000
      ```
    - **Not캒**: Butonul "Transfer c캒tre GraphQL" va r캒m칙ne blocat dac캒 acest server nu ruleaz캒!

4.  **Pornire Backend Server**:
    ```bash
    cd backend
    uvicorn main:app --reload --port 8000
    ```

5.  **Pornire Frontend Server**:
    ```bash
    cd frontend
    npm start
    ```

## Utilizarea Aplica탵iei

1.  Deschide탵i `http://localhost:5000` 칥n browser (Frontend Server).
2.  **Butonul 1: Interogare Date RDF4J**:
    - Preia datele de la serverul RDF4J 탳i le afi탳eaz캒 칥n tabelul unificat 탳i ca graf JSON-LD.
    - Transfer캒 automat datele c캒tre serverul REST pentru utilizare ulterioar캒.
3.  **Butonul 2: Afi탳are Date Server REST**:
    - Preia datele de la JSON-Server 탳i le afi탳eaz캒 칥n tabelul unificat.
4.  **Butonul 3: Transfer c캒tre GraphQL**:
    - Ia datele de la JSON-Server 탳i le transfer캒 c캒tre JSON-GraphQL-Server.
5.  **Butonul 4: (Trimitere formular cu dropdown)**:
    - V캒 permite s캒 interoga탵i propriet캒탵i specifice ale echipelor.
6.  **Butonul 5: Interogare Date GraphQL**:
    - Preia datele de la JSON-GraphQL-Server 탳i le afi탳eaz캒 칥n tabelul unificat.

## Depanare

### Probleme cu Butonul "Transfer c캒tre GraphQL"

**Problema 1**: Butonul r캒m칙ne blocat 칥n starea de 칥nc캒rcare 탳i nu se 칥nt칙mpl캒 nimic.

**Solu탵ie**: 
1. Asigura탵i-v캒 c캒 JSON-GraphQL-Server ruleaz캒:
   - Deschide탵i un terminal 칥n directorul root al proiectului
   - Rula탵i: `json-graphql-server db_graphql.json --port 3000`
   - Sau folosi탵i scriptul de pornire: `scripts/startup-graphql.bat`

2. Verifica탵i consola browserului (F12) pentru mesaje de eroare

3. Verifica탵i starea serverului folosind butonul "游댃 Verificare Stare Server"

**Problema 2**: Eroarea "504: Timeout while fetching data".

**Solu탵ie**:
1. Reporni탵i JSON Server f캒r캒 delay:
   - Opri탵i serverul JSON curent
   - Rula탵i: `json-server --watch db_rest.json --port 4000` (f캒r캒 --delay 500)
   - Sau folosi탵i scriptul de pornire: `scripts/startup-json-server.bat`

2. Reporni탵i serverul backend:
   - `cd backend`
   - `uvicorn main:app --reload --port 8000`

3. Parametrul delay (`--delay 500`) poate cauza timeout-uri 칥n timpul opera탵iunilor 칥n bloc

### Server Nu R캒spunde

- Verifica탵i c캒 toate serverele necesare ruleaz캒 pe porturile lor corecte
- Folosi탵i indicatorii de stare server de pe frontend pentru a verifica conectivitatea
- Asigura탵i-v캒 c캒 nicio alt캒 aplica탵ie nu folose탳te porturile necesare (3000, 4000, 8000, 8080)

## 칉mbun캒t캒탵iri 칥n aceast캒 Versiune

- **Frontend Server**: Acum folose탳te un server Express.js 칥n loc de servire fi탳iere statice
- **Gestionare 칉mbun캒t캒탵it캒 Erori**: Mesaje de eroare mai bune 탳i st캒ri de 칥nc캒rcare cu timeout-uri
- **Suport Execu탵ie Multipl캒**: Toate func탵ionalit캒탵ile func탵ioneaz캒 acum 칥n mod fiabil de mai multe ori
- **Indicatori de 칉nc캒rcare**: Feedback vizual 칥n timpul opera탵iunilor cu date
- **Validare Date**: Verific캒 datele goale 탳i ofer캒 mesaje corespunz캒toare
- **Suport CORS**: Configura탵ie adecvat캒 pentru partajarea resurselor 칥ntre origini
- **Gestionare Timeout**: Previne blocarea indefinit캒 c칙nd serverele nu sunt disponibile

## Referin탵캒 Configurare Porturi

- **RDF4J Server**: `8080`
- **JSON-Server REST**: `4000`
- **JSON-GraphQL-Server**: `3000` 丘멆잺 **Trebuie s캒 ruleze pentru transferul GraphQL**
- **Backend (FastAPI)**: `8000`
- **Frontend Server**: `5000`

## Mod Dezvoltare

Pentru dezvoltare cu repornire automat캒:
```bash
cd frontend
npm run dev
``` 